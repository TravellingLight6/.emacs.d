* basic
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; UTF-8 as default encoding
  (set-language-environment "UTF-8")
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (setq make-backup-files nil)
  (setq visible-bell t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f6>") 'revert-buffer)
  (global-linum-mode t)
#+END_SRC
* editors
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  (use-package cnfonts
    :config
    (cnfonts-enable))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package evil
    :config
    (evil-mode t))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package ivy
    :ensure swiper
    :ensure counsel
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x C-r") 'counsel-recentf)
    (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
    (global-set-key (kbd "C-x C-b") 'counsel-bookmark)
    (global-set-key (kbd "C-x C-t") 'counsel-load-theme)
    )
#+END_SRC
* programming
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package company
    :config
    (global-company-mode t))

  (use-package yasnippet
    :config
    (yas-global-mode 1))

  (use-package smartparens
    :config
    (smartparens-global-mode)
    )

  (use-package highlight-parentheses
    :config
    (global-highlight-parentheses-mode t))

  (use-package magit)

  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))
#+END_SRC
* lang
** latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex)

  (add-hook 'LaTeX-mode-hook 
            (lambda()
               (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
               (setq TeX-command-default "XeLaTeX")))


  (add-hook 'LaTeX-mode-hook 
            (lambda()
               (add-to-list 'TeX-command-list '("LuaLaTex" "%`lualatex%(mode)%' %t" TeX-run-TeX nil t))
               ))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
* org
** basic
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (with-eval-after-load 'org       
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC
** exporting
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package org-ref
    :config
    ;; (setq org-latex-pdf-process 
    ;; 	'("xelatex -interaction nonstopmode %f"
    ;; 	  "xelatex -interaction nonstopmode %f")) ;; for multiple passes
    (setq org-latex-pdf-process
          '("xelatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "xelatex -interaction nonstopmode -output-directory %o %f"
            "xelatex -interaction nonstopmode -output-directory %o %f"))

    ;; (setq org-latex-pdf-process
    ;;       '("pdflatex -interaction nonstopmode -output-directory %o %f"
    ;;         "bibtex %b"
    ;;         "pdflatex -interaction nonstopmode -output-directory %o %f"
    ;;         "pdflatex -interaction nonstopmode -output-directory %o %f"))
    )

  (use-package htmlize)
  ;; (setq org-html-htmlize-output-type 'inline-css) ;; default
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-postamble nil)
  (setq org-latex-caption-above nil)
#+END_SRC
* customization
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ql/reload-config ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
#+END_SRC
